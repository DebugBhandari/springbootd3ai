name: springd3 CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from GitHub repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '22.0.2' # Specify your Java version
          distribution: 'temurin' # Use the Temurin distribution

      # Step 3: Set up Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Spring Boot application
        run: |
          mvn clean install -DskipTests
          
      # Step 4: Build Docker Image for Spring Boot
      - name: Build Docker Image
        run: |
          docker build -t springd3:latest ./
          
      # Step 5: Save Docker Image locally
      - name: Save Docker Image
        run: |
          docker save springd3:latest -o springd3.tar

      # Step 6: Change permissions for the Docker Image file
      - name: Change permissions for Docker Image file
        run: |
          chmod 755 springd3.tar

      # Step 7: Transfer Docker Image file to VPS
      - name: Transfer Docker Image File to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: 22
          source: |
            d3ai.tar
          target: /var/www/springd3.jobd.link
          key: ${{ secrets.VPS_SSH_KEY }}

      # Step 8: Deploy Spring Boot application to VPS
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Load Docker Images
            docker load -i /var/www/springd3.jobd.link/d3ai.tar

            # Change directory to where docker-compose.yml is located
            cd /var/www/springd3.jobd.link/

            # Stop and remove old containers if they exist
            docker-compose down

            # Start new containers with the updated images
            docker-compose up -d --force-recreate
